
//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

// Autogenerated by gen-libclc-test.py

// RUN: %clang -emit-llvm -S -o - %s | FileCheck %s

#include <spirv/spirv_types.h>

// CHECK-NOT: declare {{.*}} @_Z
// CHECK-NOT: call {{[^ ]*}} bitcast
__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_int32_t volatile __global *args_0,
                         __clc_uint32_t args_1, __clc_uint32_t args_2,
                         __clc_int32_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}

__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_int32_t __global *args_0, __clc_uint32_t args_1,
                         __clc_uint32_t args_2, __clc_int32_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}

__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_uint32_t volatile __global *args_0,
                         __clc_uint32_t args_1, __clc_uint32_t args_2,
                         __clc_uint32_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}

__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_uint32_t __global *args_0, __clc_uint32_t args_1,
                         __clc_uint32_t args_2, __clc_uint32_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}

__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_int64_t volatile __global *args_0,
                         __clc_uint32_t args_1, __clc_uint32_t args_2,
                         __clc_int64_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}

__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_int64_t __global *args_0, __clc_uint32_t args_1,
                         __clc_uint32_t args_2, __clc_int64_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}

__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_uint64_t volatile __global *args_0,
                         __clc_uint32_t args_1, __clc_uint32_t args_2,
                         __clc_uint64_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}

__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_uint64_t __global *args_0, __clc_uint32_t args_1,
                         __clc_uint32_t args_2, __clc_uint64_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}

__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_int32_t volatile __local *args_0,
                         __clc_uint32_t args_1, __clc_uint32_t args_2,
                         __clc_int32_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}

__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_int32_t __local *args_0, __clc_uint32_t args_1,
                         __clc_uint32_t args_2, __clc_int32_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}

__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_uint32_t volatile __local *args_0,
                         __clc_uint32_t args_1, __clc_uint32_t args_2,
                         __clc_uint32_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}

__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_uint32_t __local *args_0, __clc_uint32_t args_1,
                         __clc_uint32_t args_2, __clc_uint32_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}

__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_int64_t volatile __local *args_0,
                         __clc_uint32_t args_1, __clc_uint32_t args_2,
                         __clc_int64_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}

__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_int64_t __local *args_0, __clc_uint32_t args_1,
                         __clc_uint32_t args_2, __clc_int64_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}

__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_uint64_t volatile __local *args_0,
                         __clc_uint32_t args_1, __clc_uint32_t args_2,
                         __clc_uint64_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}

__attribute__((overloadable)) void
test___spirv_AtomicStore(__clc_uint64_t __local *args_0, __clc_uint32_t args_1,
                         __clc_uint32_t args_2, __clc_uint64_t args_3) {
  __spirv_AtomicStore(args_0, args_1, args_2, args_3);
}
